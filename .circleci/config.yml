# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  terraform-plan:
    working_directory: ~/terraform
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: create creds dir
          command: mkdir terraform/creds
      - run:
          name: save terraform composer key to local
          command: echo $terraform_context_key > terraform/creds/terraform_context_key.json
      - run:
          name: save terraform gcs key to local
          command: echo $terraform_gcs_backend > terraform/creds/terraform_gcs_backend.json
      #      - run:
      #          name: ls file
      #          command: cat terraform/creds/terraform_context_key.json
      - run:
          name: terraform init
          command: |
            cd terraform
            terraform init --upgrade -reconfigure  \
            -var terraform_credentials_file="creds/terraform_context_key.json" \
            -backend-config="gcs_backend_circle.conf"
      - run:
          name: terraform plan
          command: |
            cd terraform
            terraform plan \
            -var terraform_credentials_file="creds/terraform_context_key.json" \
            -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply
          command: |
            cd terraform
            terraform apply --auto-approve tfapply
  move-dag-file:
    docker:
      - image: google/cloud-sdk

      # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  terraform-plan-apply-destroy:
    jobs:
      - terraform-plan:
          context:
            - mb_terraform_context
      - terraform-apply:
          context:
            - mb_terraform_context
          requires:
            - terraform-plan

